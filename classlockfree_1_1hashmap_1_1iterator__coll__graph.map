<map id="lockfree::hashmap&lt; Key, T &gt;::iterator" name="lockfree::hashmap&lt; Key, T &gt;::iterator">
<area shape="rect" id="node2" href="$classlockfree_1_1hashmap.html" title="{lockfree::hashmap\&lt;\l Key, T \&gt;\n|&#45; m_buckets\l&#45; m_size\l&#45; m_backbuffer\l&#45; m_backbuffer_mutex\l&#45; m_active_stats\l|+ hashmap()\l+ ~hashmap()\l+ init()\l+ destroy()\l+ find()\l+ find_or_insert()\l+ insert()\l+ insert_given()\l+ erase()\l+ erase_locked()\l+ unlock()\l+ clear()\l+ freelist_claim()\l+ freelist_retire()\l+ start_tran()\l+ end_tran()\l+ dump_stats()\l+ activate_stats()\l+ deactivate_stats()\l+ get_size()\l+ get_element_count()\l&#45; get_ref()\l&#45; get_ptr()\l&#45; get_ptr_deref()\l&#45; get_keyp()\l&#45; get_nextp()\l&#45; get_nextp_ref()\l&#45; get_pthread_mutexp()\l&#45; to_free_node()\l&#45; from_free_node()\l&#45; save_temporary()\l&#45; claim_temporary()\l&#45; freelist_claim()\l&#45; freelist_retire()\l&#45; safeguard_use_mutex\l_or_tran_started()\l&#45; start_tran_if_not_started()\l&#45; start_tran_force()\l&#45; promote_tran_force()\l&#45; end_tran_if_started()\l&#45; end_tran_force()\l&#45; lock_entry()\l&#45; unlock_entry()\l&#45; lock_entry_mutex()\l&#45; unlock_entry_mutex\l_if_locked()\l&#45; unlock_entry_mutex\l_force()\l&#45; get_hash()\l&#45; get_bucket()\l&#45; get_tran_descriptor()\l&#45; list_find()\l&#45; list_insert_internal()\l&#45; list_delete()\l&#45; hash_insert_internal()\l&#45; hash_erase_internal()\l&#45; dump_stat()\l&#45; free_node_offset_of_data()\l}" alt="" coords="176,732,361,1719"/>
<area shape="rect" id="node3" href="$classcubmonitor_1_1counter__timer__statistic.html" title="{cubmonitor::counter\l_timer_statistic\&lt; A, T \&gt;\n|&#45; m_amount_statistic\l&#45; m_time_statistic\l|+ counter_timer_statistic()\l+ time_and_increment()\l+ time_and_increment()\l+ reset_timer()\l+ get_statistics_count()\l+ fetch()\l+ get_count()\l+ get_time()\l+ get_average_time()\l+ register_to_monitor()\l}" alt="" coords="5,167,180,405"/>
<area shape="rect" id="node4" href="$structlf__entry__descriptor.html" title="{lf_entry_descriptor\n|+ of_local_next\l+ of_next\l+ of_del_tran_id\l+ of_key\l+ of_mutex\l+ using_mutex\l+ f_alloc\l+ f_free\l+ f_init\l+ f_uninit\l+ f_key_copy\l+ f_key_cmp\l+ f_hash\l+ f_duplicate\l|}" alt="" coords="204,152,333,420"/>
<area shape="rect" id="node5" href="$classlockfree_1_1freelist.html" title="{lockfree::freelist\&lt; T \&gt;\n|&#45; m_block_size\l&#45; m_available_list\l&#45; m_backbuffer_head\l&#45; m_backbuffer_tail\l&#45; m_available_count\l&#45; m_alloc_count\l&#45; m_bb_count\l&#45; m_forced_alloc_count\l&#45; m_retired_count\l|+ freelist()\l+ freelist()\l+ ~freelist()\l+ claim()\l+ claim()\l+ retire()\l+ retire()\l+ get_alloc_count()\l+ get_available_count()\l+ get_backbuffer_count()\l+ get_forced_allocation\l_count()\l+ get_retired_count()\l+ get_claimed_count()\l+ get_transaction_system()\l+ get_transaction_table()\l&#45; swap_backbuffer()\l&#45; alloc_backbuffer()\l&#45; force_alloc_block()\l&#45; alloc_list()\l&#45; dealloc_list()\l&#45; pop_from_available()\l&#45; push_to_list()\l&#45; clear_free_nodes()\l&#45; final_sanity_checks()\l&#45; check_my_pointer()\l}" alt="" coords="358,5,539,567"/>
<area shape="rect" id="node6" href="$classlockfree_1_1tran_1_1descriptor.html" title="{lockfree::tran::descriptor\n|&#45; m_tranid\l&#45; m_last_reclaim_minid\l&#45; m_did_incr\l&#45; m_retire_count\l&#45; m_reclaim_count\l|+ descriptor()\l+ ~descriptor()\l+ retire_node()\l+ set_table()\l+ start_tran()\l+ start_tran_and_increment_id()\l+ end_tran()\l+ is_tran_started()\l+ get_transaction_id()\l+ reclaim_retired_list()\l+ save_reclaimable()\l+ pull_saved_reclaimable()\l+ get_total_retire_count()\l+ get_total_reclaim_count()\l+ get_current_retire\l_count()\l&#45; reclaim_retired_head()\l}" alt="" coords="385,1040,592,1411"/>
</map>
