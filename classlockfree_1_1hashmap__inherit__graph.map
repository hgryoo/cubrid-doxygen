<map id="lockfree::hashmap&lt; Key, T &gt;" name="lockfree::hashmap&lt; Key, T &gt;">
<area shape="rect" id="node2" href="$classlockfree_1_1hashmap.html" title="{lockfree::hashmap\&lt;\l xasl_id, xasl_cache_ent \&gt;\n|&#45; m_freelist\l&#45; m_buckets\l&#45; m_size\l&#45; m_backbuffer\l&#45; m_backbuffer_mutex\l&#45; m_edesc\l&#45; m_stat_find\l&#45; m_stat_insert\l&#45; m_stat_erase\l&#45; m_stat_unlock\l&#45; m_stat_clear\l&#45; m_stat_iterates\l&#45; m_stat_claim\l&#45; m_stat_retire\l&#45; m_active_stats\l|+ hashmap()\l+ ~hashmap()\l+ init()\l+ destroy()\l+ find()\l+ find_or_insert()\l+ insert()\l+ insert_given()\l+ erase()\l+ erase_locked()\l+ unlock()\l+ clear()\l+ freelist_claim()\l+ freelist_retire()\l+ start_tran()\l+ end_tran()\l+ dump_stats()\l+ activate_stats()\l+ deactivate_stats()\l+ get_size()\l+ get_element_count()\l&#45; freelist_claim()\l&#45; freelist_retire()\l&#45; get_ref()\l&#45; get_ptr()\l&#45; get_ptr_deref()\l&#45; get_keyp()\l&#45; get_nextp()\l&#45; get_nextp_ref()\l&#45; get_pthread_mutexp()\l&#45; to_free_node()\l&#45; from_free_node()\l&#45; save_temporary()\l&#45; claim_temporary()\l&#45; safeguard_use_mutex\l_or_tran_started()\l&#45; start_tran_if_not_started()\l&#45; start_tran_force()\l&#45; promote_tran_force()\l&#45; end_tran_if_started()\l&#45; end_tran_force()\l&#45; lock_entry()\l&#45; unlock_entry()\l&#45; lock_entry_mutex()\l&#45; unlock_entry_mutex\l_if_locked()\l&#45; unlock_entry_mutex\l_force()\l&#45; get_hash()\l&#45; get_bucket()\l&#45; get_tran_descriptor()\l&#45; list_find()\l&#45; list_insert_internal()\l&#45; list_delete()\l&#45; hash_insert_internal()\l&#45; hash_erase_internal()\l&#45; dump_stat()\l&#45; free_node_offset_of_data()\l}" alt="" coords="5,1223,191,2357"/>
<area shape="rect" id="node3" href="$classlockfree_1_1hashmap.html" title="{lockfree::hashmap\&lt;\l SESSION_ID, session\l_state \&gt;\n|&#45; m_freelist\l&#45; m_buckets\l&#45; m_size\l&#45; m_backbuffer\l&#45; m_backbuffer_mutex\l&#45; m_edesc\l&#45; m_stat_find\l&#45; m_stat_insert\l&#45; m_stat_erase\l&#45; m_stat_unlock\l&#45; m_stat_clear\l&#45; m_stat_iterates\l&#45; m_stat_claim\l&#45; m_stat_retire\l&#45; m_active_stats\l|+ hashmap()\l+ ~hashmap()\l+ init()\l+ destroy()\l+ find()\l+ find_or_insert()\l+ insert()\l+ insert_given()\l+ erase()\l+ erase_locked()\l+ unlock()\l+ clear()\l+ freelist_claim()\l+ freelist_retire()\l+ start_tran()\l+ end_tran()\l+ dump_stats()\l+ activate_stats()\l+ deactivate_stats()\l+ get_size()\l+ get_element_count()\l&#45; freelist_claim()\l&#45; freelist_retire()\l&#45; get_ref()\l&#45; get_ptr()\l&#45; get_ptr_deref()\l&#45; get_keyp()\l&#45; get_nextp()\l&#45; get_nextp_ref()\l&#45; get_pthread_mutexp()\l&#45; to_free_node()\l&#45; from_free_node()\l&#45; save_temporary()\l&#45; claim_temporary()\l&#45; safeguard_use_mutex\l_or_tran_started()\l&#45; start_tran_if_not_started()\l&#45; start_tran_force()\l&#45; promote_tran_force()\l&#45; end_tran_if_started()\l&#45; end_tran_force()\l&#45; lock_entry()\l&#45; unlock_entry()\l&#45; lock_entry_mutex()\l&#45; unlock_entry_mutex\l_if_locked()\l&#45; unlock_entry_mutex\l_force()\l&#45; get_hash()\l&#45; get_bucket()\l&#45; get_tran_descriptor()\l&#45; list_find()\l&#45; list_insert_internal()\l&#45; list_delete()\l&#45; hash_insert_internal()\l&#45; hash_erase_internal()\l&#45; dump_stat()\l&#45; free_node_offset_of_data()\l}" alt="" coords="215,1216,400,2364"/>
<area shape="rect" id="node4" href="$classlockfree_1_1hashmap.html" title="{lockfree::hashmap\&lt;\l VPID, dwb_slots_hash\l_entry \&gt;\n|&#45; m_freelist\l&#45; m_buckets\l&#45; m_size\l&#45; m_backbuffer\l&#45; m_backbuffer_mutex\l&#45; m_edesc\l&#45; m_stat_find\l&#45; m_stat_insert\l&#45; m_stat_erase\l&#45; m_stat_unlock\l&#45; m_stat_clear\l&#45; m_stat_iterates\l&#45; m_stat_claim\l&#45; m_stat_retire\l&#45; m_active_stats\l|+ hashmap()\l+ ~hashmap()\l+ init()\l+ destroy()\l+ find()\l+ find_or_insert()\l+ insert()\l+ insert_given()\l+ erase()\l+ erase_locked()\l+ unlock()\l+ clear()\l+ freelist_claim()\l+ freelist_retire()\l+ start_tran()\l+ end_tran()\l+ dump_stats()\l+ activate_stats()\l+ deactivate_stats()\l+ get_size()\l+ get_element_count()\l&#45; freelist_claim()\l&#45; freelist_retire()\l&#45; get_ref()\l&#45; get_ptr()\l&#45; get_ptr_deref()\l&#45; get_keyp()\l&#45; get_nextp()\l&#45; get_nextp_ref()\l&#45; get_pthread_mutexp()\l&#45; to_free_node()\l&#45; from_free_node()\l&#45; save_temporary()\l&#45; claim_temporary()\l&#45; safeguard_use_mutex\l_or_tran_started()\l&#45; start_tran_if_not_started()\l&#45; start_tran_force()\l&#45; promote_tran_force()\l&#45; end_tran_if_started()\l&#45; end_tran_force()\l&#45; lock_entry()\l&#45; unlock_entry()\l&#45; lock_entry_mutex()\l&#45; unlock_entry_mutex\l_if_locked()\l&#45; unlock_entry_mutex\l_force()\l&#45; get_hash()\l&#45; get_bucket()\l&#45; get_tran_descriptor()\l&#45; list_find()\l&#45; list_insert_internal()\l&#45; list_delete()\l&#45; hash_insert_internal()\l&#45; hash_erase_internal()\l&#45; dump_stat()\l&#45; free_node_offset_of_data()\l}" alt="" coords="424,1216,609,2364"/>
</map>
